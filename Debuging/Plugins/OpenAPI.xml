<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenAPI</name>
    </assembly>
    <members>
        <member name="T:OpenAPI.Events.Block.BlockAbortBreakEvent">
            <summary>
                Get's dispatched whenever a <see cref="T:OpenAPI.Player.OpenPlayer"/> stops breaking a block before the block could be destroyed.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Block.BlockAbortBreakEvent.#ctor(OpenAPI.Player.OpenPlayer,MiNET.Blocks.Block)">
            <summary>
                
            </summary>
            <param name="player">The player that triggered the event</param>
            <param name="block">The block that the player was targetting</param>
        </member>
        <member name="T:OpenAPI.Events.Block.BlockBreakEvent">
            <summary>
            	Gets dispatched when a <see cref="T:MiNET.Entities.Entity"/> breaks a block.
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Block.BlockBreakEvent.Source">
            <summary>
            	The <see cref="T:MiNET.Entities.Entity"/> that broke the block.
            	This can be a player, a mob or null.
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Block.BlockBreakEvent.Drops">
            <summary>
            	The items that were to be dropped if the block gets broken.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Block.BlockBreakEvent.#ctor(MiNET.Entities.Entity,MiNET.Blocks.Block,System.Collections.Generic.List{MiNET.Items.Item})">
            <summary>
            	
            </summary>
            <param name="player">The entity that triggered the event</param>
            <param name="block">The block that was broken</param>
            <param name="drops">The items that were gonna be dropped if the block broke</param>
        </member>
        <member name="T:OpenAPI.Events.Block.BlockEvent">
            <summary>
            	The base class for any events related to blocks
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Block.BlockExpEvent">
            <summary>
            	Dispatched when a block released experience points
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Block.BlockExpEvent.Experience">
            <summary>
            	The amount of XP released by the block
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Block.BlockExpEvent.#ctor(MiNET.Blocks.Block,System.Single)">
            <summary>
            	
            </summary>
            <param name="block">The block that released the XP</param>
            <param name="experience">The XP that is to be released</param>
        </member>
        <member name="T:OpenAPI.Events.Block.BlockPlaceEvent">
            <summary>
            	Get's dispatched whenever a <see cref="T:OpenAPI.Player.OpenPlayer"/> tries to place a block.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Block.BlockPlaceEvent.#ctor(OpenAPI.Player.OpenPlayer,MiNET.Blocks.Block)">
            <summary>
            	
            </summary>
            <param name="player">The player that tried placing the block</param>
            <param name="block">The block the player was trying to place.</param>
        </member>
        <member name="T:OpenAPI.Events.Block.BlockStartBreakEvent">
            <summary>
                Gets dispatched when a <see cref="T:OpenAPI.Player.OpenPlayer"/> start breaking a block
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Block.BlockStartBreakEvent.#ctor(MiNET.Entities.Entity,MiNET.Blocks.Block)">
            <summary>
                
            </summary>
            <param name="player">The player that started breaking the block.</param>
            <param name="block">The block that is to be destroyed</param>
        </member>
        <member name="T:OpenAPI.Events.Entity.EntityDamageEvent">
            <summary>
            	Dispatched when an Entity gets damaged
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Entity.EntityDamageEvent.#ctor(MiNET.Entities.Entity,MiNET.Entities.Entity,MiNET.DamageCause,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="entity">The entity that has been damaged</param>
            <param name="source">The source of the of the damage</param>
            <param name="cause">The cause of the damage</param>
            <param name="previousHealth">The entity's previous health value</param>
            <param name="newHealth">The entity's new health value</param>
        </member>
        <member name="T:OpenAPI.Events.Entity.EntityEvent">
            <summary>
            	The base class for any Entity related events
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Entity.EntityInteractEvent">
            <summary>
            	Dispatched when a <see cref="T:OpenAPI.Player.OpenPlayer"/> interacts with an entity
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Entity.EntityInteractEvent.#ctor(MiNET.Entities.Entity,OpenAPI.Player.OpenPlayer,MiNET.Net.McpeInventoryTransaction.ItemUseOnEntityAction)">
            <summary>
            	
            </summary>
            <param name="entity">The entity the player has interacted with</param>
            <param name="source">The player that initiated the interaction</param>
            <param name="action">The action that got initiated</param>
        </member>
        <member name="T:OpenAPI.Events.Entity.EntityKilledEvent">
            <summary>
            	Dispatched when an entity got killed.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Entity.EntityKilledEvent.#ctor(MiNET.Entities.Entity)">
            <summary>
            	
            </summary>
            <param name="entity">The entity that got killed.</param>
        </member>
        <member name="T:OpenAPI.Events.Entity.EntityRegainHealthEvent">
            <summary>
            	Dispatched when an entity regains health
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Entity.EntityRegainHealthEvent.#ctor(MiNET.Entities.Entity,System.Int32,System.Int32)">
            <summary>
            	
            </summary>
            <param name="entity">The entity who's health was regained</param>
            <param name="previousHealth">The entity's previous health</param>
            <param name="newHealth">The entity's new health</param>
        </member>
        <member name="T:OpenAPI.Events.Event">
            <summary>
            	The base class all OpenApi Events implement
            </summary>
        </member>
        <member name="T:OpenAPI.Events.EventDispatcher">
            <summary>
            	The <see cref="T:OpenAPI.Events.EventDispatcher"/> is responsible for dispatching and invoking all the registered <see cref="T:OpenAPI.Events.IEventHandler"/> methods
            </summary>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.RegisterEventType``1">
            <summary>
            	Registers a new <see cref="T:OpenAPI.Events.Event"/> type with the current EventDispatcher
            </summary>
            <typeparam name="TEvent">The type of the <see cref="T:OpenAPI.Events.Event"/> to register</typeparam>
            <exception cref="T:OpenAPI.Events.DuplicateTypeException">Thrown when the type of <typeparamref name="TEvent"/> has already been registered.</exception>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.RegisterEventType(System.Type)">
            <summary>
            Registers a new <see cref="T:OpenAPI.Events.Event"/>
            </summary>
            <param name="type">The type of the <see cref="T:OpenAPI.Events.Event"/> to register</param>
            <returns>Whether the event was succesfully registered.</returns>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.LoadFrom(System.Reflection.Assembly)">
            <summary>
            	Loads all types implementing the <see cref="T:OpenAPI.Events.Event"/> class
            </summary>
            <param name="assembly">The assembly containing the <see cref="T:OpenAPI.Events.Event"/> implementations</param>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.Unload(System.Reflection.Assembly)">
            <summary>
            	Unloads all <see cref="T:OpenAPI.Events.Event"/>'s that were registered by specified assembly
            </summary>
            <param name="assembly">The assembly containing the types to be unloaded.</param>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.RegisterEvents(OpenAPI.Events.IEventHandler)">
            <summary>
            	Registers all EventHandler methods with the current EventDispatcher.
            </summary>
            <param name="obj">The class to scan for EventHandlers</param>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.UnregisterEvents(OpenAPI.Events.IEventHandler)">
            <summary>
            	Unregisters all <see cref="T:OpenAPI.Events.EventHandlerAttribute"/> from the specified <see cref="T:OpenAPI.Events.IEventHandler"/> implementation from the current EventDispatcher
            	After UnRegistering, the class will no longer get invoked when an event gets dispatched.
            </summary>
            <param name="obj">The implementation to unregister the eventhandlers for</param>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.DispatchEvent(OpenAPI.Events.Event)">
            <summary>
            	Dispatches a new <see cref="T:OpenAPI.Events.Event"/> to all methods registered with an <see cref="T:OpenAPI.Events.EventHandlerAttribute"/>
            </summary>
            <param name="e">The event to dispatch</param>
        </member>
        <member name="M:OpenAPI.Events.EventDispatcher.DispatchEventAsync``1(``0)">
            <summary>
            	Dispatches 
            </summary>
            <param name="e"></param>
            <typeparam name="TEvent"></typeparam>
            <returns></returns>
        </member>
        <member name="T:OpenAPI.Events.EventHandlerAttribute">
            <summary>
            Marks the method as an Event Handler method
            In order for the method to be called the parent class must implement <see cref="T:OpenAPI.Events.IEventHandler"/> and be registered with an <see cref="T:OpenAPI.Events.EventDispatcher"/>
            </summary>
        </member>
        <member name="P:OpenAPI.Events.EventHandlerAttribute.Priority">
            <summary>
            Determines when the methhod will be invoked by the <see cref="T:OpenAPI.Events.EventDispatcher"/>.
            For more details see <see cref="T:OpenAPI.Events.EventPriority"/>
            </summary>
        </member>
        <member name="P:OpenAPI.Events.EventHandlerAttribute.IgnoreCanceled">
            <summary>
            Determines whether this method should still be invoked even if another EventHandler has already cancelled the event.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.EventHandlerAttribute.#ctor(OpenAPI.Events.EventPriority,System.Boolean)">
            <summary>
            	
            </summary>
            <param name="priority">The priority to be used for this eventhandler</param>
            <param name="ignoreCanceled">See <see cref="P:OpenAPI.Events.EventHandlerAttribute.IgnoreCanceled"/> </param>
        </member>
        <member name="T:OpenAPI.Events.EventPriority">
            <summary>
            	Determines in what order the events should be handled.
            	Highest priority is executed last, lowest is executed first.
            </summary>
        </member>
        <member name="F:OpenAPI.Events.EventPriority.Lowest">
            <summary>
            	Gets executed 1st
            </summary>
        </member>
        <member name="F:OpenAPI.Events.EventPriority.Low">
            <summary>
            	Gets executed 2nd
            </summary>
        </member>
        <member name="F:OpenAPI.Events.EventPriority.Normal">
            <summary>
            	Gets executed 3rd
            </summary>
        </member>
        <member name="F:OpenAPI.Events.EventPriority.High">
            <summary>
            	Gets executed 4th
            </summary>
        </member>
        <member name="F:OpenAPI.Events.EventPriority.Highest">
            <summary>
            	Gets executed second to last
            </summary>
        </member>
        <member name="F:OpenAPI.Events.EventPriority.Monitor">
            <summary>
            	Gets executed last, always has the final say over the result
            </summary>
        </member>
        <member name="T:OpenAPI.Events.IEventHandler">
            <summary>
            Classes that implement <see cref="T:OpenAPI.Events.IEventHandler"/> are able to receive events dispatched by a <see cref="T:OpenAPI.Events.EventDispatcher"/>
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Level.ChunkEvent">
            <summary>
            	The base class for any <see cref="T:MiNET.Worlds.ChunkColumn"/> events
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Level.ChunkEvent.Chunk">
            <summary>
            	The chunk the event occured in
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Level.ChunkGeneratedEvent">
            <summary>
                Dispatched when a new chunk was generated
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Level.ChunkGeneratedEvent.Coordinates">
            <summary>
                The coordinates of the chunk that got generated
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Level.ChunkGeneratedEvent.#ctor(MiNET.Utils.ChunkCoordinates,MiNET.Worlds.ChunkColumn,OpenAPI.World.OpenLevel)">
            <summary>
            
            </summary>
            <param name="coordinates">The coordinates of the new chunk</param>
            <param name="chunk">An instance of the affected chunk</param>
            <param name="level">The level the chunk was generated in</param>
        </member>
        <member name="T:OpenAPI.Events.Level.ChunkLoadEvent">
            <summary>
            	Dispatched when a chunk was loaded.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Level.ChunkLoadEvent.#ctor(MiNET.Worlds.ChunkColumn,OpenAPI.World.OpenLevel)">
            <summary>
            	
            </summary>
            <param name="chunk">The chunk that was loaded in</param>
            <param name="level">The level the chunk was loaded in to</param>
        </member>
        <member name="T:OpenAPI.Events.Level.ChunkUnloadEvent">
            <summary>
            	Dispatched when a <see cref="T:MiNET.Worlds.ChunkColumn"/> was unloaded
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Level.ChunkUnloadEvent.#ctor(MiNET.Worlds.ChunkColumn,OpenAPI.World.OpenLevel)">
            <summary>
            	
            </summary>
            <param name="chunk">The chunk that was unloaded</param>
            <param name="level">The level the chunk was unloaded from</param>
        </member>
        <member name="T:OpenAPI.Events.Level.LevelClosedEvent">
            <summary>
            	Dispatched when a <see cref="T:OpenAPI.World.OpenLevel"/> gets closed.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Level.LevelClosedEvent.#ctor(OpenAPI.World.OpenLevel)">
            <summary>
            	
            </summary>
            <param name="world">The level that got closed</param>
        </member>
        <member name="T:OpenAPI.Events.Level.LevelEntityAddedEvent">
            <summary>
            	Dispatched when an Entity gets added to a <see cref="T:OpenAPI.World.OpenLevel"/>
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Level.LevelEntityAddedEvent.Entity">
            <summary>
            	The entity that got added
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Level.LevelEntityAddedEvent.#ctor(OpenAPI.World.OpenLevel,MiNET.Entities.Entity)">
            <summary>
            
            </summary>
            <param name="world">The level the entity was added to</param>
            <param name="entity">The entity that has been added</param>
        </member>
        <member name="T:OpenAPI.Events.Level.LevelEntityRemovedEvent">
            <summary>
            	Dispatched when an entity gets removed from an <see cref="T:OpenAPI.World.OpenLevel"/>
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Level.LevelEntityRemovedEvent.Entity">
            <summary>
            	The entity that got removed
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Level.LevelEvent.Level">
            <summary>
            	The level that the event occured in
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Level.LevelInitEvent">
            <summary>
            	Dispatched when an <see cref="T:OpenAPI.World.OpenLevel"/> gets initiated.
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Level.LevelInitEvent.#ctor(OpenAPI.World.OpenLevel)">
            <summary>
            	
            </summary>
            <param name="world">The level that got initiated</param>
        </member>
        <member name="T:OpenAPI.Events.Player.FoodLevelChangeEvent">
            <summary>
                Dispatched whenever a <see cref="T:OpenAPI.Player.OpenPlayer"/>'s food level changes
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.FoodLevelChangeEvent.OldLevel">
            <summary>
                The players old food level
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.FoodLevelChangeEvent.NewLevel">
            <summary>
                The players new food level
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.FoodLevelChangeEvent.OldExhaustion">
            <summary>
                The players old exhaustion value
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.FoodLevelChangeEvent.NewExhaustion">
            <summary>
                The players new exhaustion value
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.FoodLevelChangeEvent.OldSaturation">
            <summary>
                The players old saturation level
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.FoodLevelChangeEvent.NewSaturation">
            <summary>
                The players new saturation level
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerChatEvent">
            <summary>
            	Dispatched whenever an <see cref="T:OpenAPI.Player.OpenPlayer"/> says something in chat
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerChatEvent.Message">
            <summary>
            	The message sent by the player
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerCreatedEvent">
            <summary>
                Dispatched whenever a <see cref="T:OpenAPI.Player.OpenPlayer"/> was created by the <see cref="T:OpenAPI.Player.OpenPlayerManager"/>
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Player.PlayerCreatedEvent.#ctor(OpenAPI.Player.OpenPlayer)">
            <summary>
                
            </summary>
            <param name="player">The player that got created</param>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerDespawnedEvent">
            <summary>
            	Dispatched whenever an <see cref="T:OpenAPI.Player.OpenPlayer"/> despawns
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerEvent">
            <summary>
            	The base class for any <see cref="T:OpenAPI.Player.OpenPlayer"/> event
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerEvent.Player">
            <summary>
            	The player that the event occured for.
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerInteractEvent">
            <summary>
                Dispatched whenever an <see cref="T:OpenAPI.Player.OpenPlayer"/> interacts with a block or air
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerInteractEvent.InteractType">
            <summary>
                The type of interaction
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerInteractEvent.Item">
            <summary>
                The item the player was holding
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerInteractEvent.Coordinates">
            <summary>
                The coordinates of the block the player interacted with
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerInteractEvent.Face">
            <summary>
                The face that the player hit
            </summary>
        </member>
        <member name="F:OpenAPI.Events.Player.PlayerInteractEvent.PlayerInteractType.Physical">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerItemDropEvent">
            <summary>
            	Dispatched when an <see cref="T:OpenAPI.Player.OpenPlayer"/> drops an item
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerItemDropEvent.DroppedItem">
            <summary>
            	The item dropped
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerItemDropEvent.NewInventoryItem">
            <summary>
            	The item replacing the inventory slot
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerItemDropEvent.From">
            <summary>
            	The location of the player at the time of dropping
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerItemUseEvent">
            <summary>
                Dispatched when an <see cref="T:OpenAPI.Player.OpenPlayer"/> uses an Item
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerItemUseEvent.ItemUsed">
            <summary>
                The item used
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerJoinEvent">
            <summary>
            	Dispatched when an <see cref="T:OpenAPI.Player.OpenPlayer"/> joins the server
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerLoginCompleteEvent">
            <summary>
            	Dispatched when an <see cref="T:OpenAPI.Player.OpenPlayer"/> completes the login cycle
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerLoginCompleteEvent.CompletionTime">
            <summary>
            	The time the player completed the login
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerMoveEvent">
            <summary>
            	Dispatched whenever an <see cref="T:OpenAPI.Player.OpenPlayer"/> moves
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerMoveEvent.From">
            <summary>
            	The players old location
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerMoveEvent.To">
            <summary>
            	The players new location
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Player.PlayerMoveEvent.IsTeleport">
            <summary>
            	Whether or not the player teleported
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerQuitEvent">
            <summary>
            	Dispatched when an <see cref="T:OpenAPI.Player.OpenPlayer"/> leaves the server
            </summary>
        </member>
        <member name="T:OpenAPI.Events.Player.PlayerSpawnedEvent">
            <summary>
            	Dispatched when an <see cref="T:OpenAPI.Player.OpenPlayer"/> spawns in a world
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:OpenAPI.Events.Plugins.PluginEnabledEvent" -->
        <member name="P:OpenAPI.Events.Plugins.PluginEnabledEvent.PluginAssembly">
            <summary>
                The assembly the plugin was loaded from
            </summary>
        </member>
        <member name="P:OpenAPI.Events.Plugins.PluginEnabledEvent.PluginInstance">
            <summary>
                The plugin instance that was enabled
            </summary>
        </member>
        <member name="M:OpenAPI.Events.Plugins.PluginEnabledEvent.#ctor(System.Reflection.Assembly,OpenAPI.Plugins.OpenPlugin)">
            <summary>
                
            </summary>
            <param name="pluginAssembly"></param>
            <param name="pluginInstance"></param>
        </member>
        <member name="T:OpenAPI.Events.Server.ServerReadyEvent">
            <summary>
                Gets dispatched when the server has fully started up.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:OpenAPI.OpenApi" -->
        <member name="P:OpenAPI.OpenApi.LevelManager">
            <summary>
            	The <see cref="T:OpenAPI.World.OpenLevelManager"/> instance responsible for all Levels <see cref="T:OpenAPI.World.OpenLevel"/>
            </summary>
        </member>
        <member name="P:OpenAPI.OpenApi.PlayerManager">
            <summary>
            	The root <see cref="T:OpenAPI.Player.OpenPlayerManager"/> responsible for keeping track of all Online Players
            </summary>
        </member>
        <member name="P:OpenAPI.OpenApi.MotdProvider">
            <summary>
            	The <see cref="T:OpenAPI.OpenMotdProvider"/> responsible for the MOTD's displayed on the client serverlist
            </summary>
        </member>
        <member name="P:OpenAPI.OpenApi.PluginManager">
            <summary>
            	The <see cref="T:OpenAPI.Plugins.OpenPluginManager"/> instance responsible for any loaded plugins
            </summary>
        </member>
        <member name="P:OpenAPI.OpenApi.EventDispatcher">
            <summary>
            	The root <see cref="P:OpenAPI.OpenApi.EventDispatcher"/>
            	If you want to receive all server wide events <see cref="T:OpenAPI.Events.Event"/> this is the instance to do so.
            </summary>
        </member>
        <member name="P:OpenAPI.OpenApi.OpenServer">
            <summary>
            	The server instance handling all networking etc
            </summary>
        </member>
        <member name="T:OpenAPI.Player.OpenPlayer">
            <summary>
            	The Player class used for all Players connected to an OpenAPI server.
            </summary>
        </member>
        <member name="M:OpenAPI.Player.OpenPlayer.SetGamemode(MiNET.Worlds.GameMode)">
            <summary>
            	Set's the players gamemode to the specified gamemode
            </summary>
            <param name="gameMode">The gamemode to set for the player</param>
        </member>
        <member name="P:OpenAPI.Player.OpenPlayer.Disguise">
            <summary>
            	Can be used to Disguise a player into any Entity. See <see cref="T:OpenAPI.Entities.EntityDisguise"/> and <seealso cref="T:MiNET.Entities.Entity"/>
            	Can be undone by setting the value to null.
            </summary>
        </member>
        <member name="P:OpenAPI.Player.OpenPlayer.IsDisguised">
            <summary>
            	Whether the player is currently Disguised using the <see cref="P:OpenAPI.Player.OpenPlayer.Disguise"/> property
            </summary>
        </member>
        <member name="M:OpenAPI.Player.OpenPlayer.GetAttribute``1">
            <summary>
            	Allows you to retrieve the value for any PlayerAttributes set on a player <see cref="T:OpenAPI.Player.IOpenPlayerAttribute"/>
            </summary>
            <typeparam name="TAttribute">The attribute type to retrieve its value for</typeparam>
            <returns>The value for the requested attribute, or null if no value was found.</returns>
        </member>
        <member name="M:OpenAPI.Player.OpenPlayer.SetAttribute``1(``0)">
            <summary>
            	Allows you to store extra data on a player using PlayerAttributes <see cref="T:OpenAPI.Player.IOpenPlayerAttribute"/>
            </summary>
            <param name="attribute">The value to set the attribute to</param>
            <typeparam name="TAttribute">The type of the attribute you wish to set.</typeparam>
        </member>
        <member name="T:OpenAPI.Plugins.DependencyContainer">
            <summary>
                A dependency injection container
            </summary>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.TryResolve``1(``0@)">
            <summary>
                Tries to resolve a service
            </summary>
            <param name="dependency">The resolved service.</param>
            <typeparam name="TType">The type of service to resolve</typeparam>
            <returns>Whether the service was able to be resolved or not</returns>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.TryResolve(System.Type,System.Object@)">
            <summary>
                Tries to resolve a service
            </summary>
            <param name="dependency">The resolved service.</param>
            <param name="type">The type of service to resolve</param>
            <returns>Whether the service was able to be resolved or not</returns>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.Resolve``1">
            <summary>
                Resolve a service
            </summary>
            <typeparam name="TType">The type to resolve.</typeparam>
            <returns>The resolved service</returns>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.Resolve(System.Type)">
            <summary>
                Resolve a service
            </summary>
            <returns>The resolved service</returns>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.Remove(System.Type)">
            <summary>
                Remove a service from dependency injection
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.Remove``1">
            <summary>
                Remove a service from dependency injection
            </summary>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.Register``1(OpenAPI.Plugins.DependencyLifetime)">
            <summary>
                Registers a new service
            </summary>
            <param name="lifetime">How long to keep the service alive for</param>
            <typeparam name="TType">The type of service to register</typeparam>
            <exception cref="T:OpenAPI.Events.DuplicateTypeException">Thrown when a service of the same type has already been registered</exception>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.RegisterSingleton``1(``0)">
            <summary>
                Registers a new singleton service
            </summary>
            <param name="value">The instance to use for dependency injection</param>
            <typeparam name="TType">The type of service to register</typeparam>
            <exception cref="T:OpenAPI.Events.DuplicateTypeException">Thrown when a service of the same type has already been registered</exception>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.RegisterSingleton(System.Type,System.Object)">
            <summary>
                Registers a new singleton service
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenAPI.Plugins.DependencyContainer.ServiceItem.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:OpenAPI.Plugins.DependencyLifetime">
            <summary>
                Used to determine a services lifetime
            </summary>
        </member>
        <member name="F:OpenAPI.Plugins.DependencyLifetime.Singleton">
            <summary>
                Keep 1 instance throughout the service lifetime
            </summary>
        </member>
        <member name="F:OpenAPI.Plugins.DependencyLifetime.Transient">
            <summary>
                Create a new instance everytime it is requested
            </summary>
        </member>
        <member name="T:OpenAPI.Plugins.OpenPlugin">
            <summary>
            	Provides the base class for any plugin.
            	All plugins running on OpenAPI must have atleast one class inhereting this.
            </summary>
        </member>
        <member name="M:OpenAPI.Plugins.OpenPlugin.Enabled(OpenAPI.OpenApi)">
            <summary>
            	The method that gets invoked as soon as a plugin gets Enabled.
            	Any initialization should be done in here.
            </summary>
            <param name="api">An instance to OpenApi</param>
        </member>
        <member name="M:OpenAPI.Plugins.OpenPlugin.Disabled(OpenAPI.OpenApi)">
            <summary>
            	The method that gets invoked as soon as a plugin gets Disabled.
            	Any content initialized in <see cref="M:OpenAPI.Plugins.OpenPlugin.Enabled(OpenAPI.OpenApi)"/> should be de-initialized in here.
            </summary>
            <param name="api">An instance to OpenApi</param>
        </member>
        <member name="T:OpenAPI.Plugins.OpenPluginInfo">
            <summary>
                An attribute containing information about a plugin.
                It can be applied on any classes implementing the OpenPlugin <see cref="T:OpenAPI.Plugins.OpenPlugin"/> class.
            </summary>
        </member>
        <member name="P:OpenAPI.Plugins.OpenPluginInfo.Name">
            <summary>
            The name of the plugin
            <example>MyPlugin</example>
            </summary>
        </member>
        <member name="P:OpenAPI.Plugins.OpenPluginInfo.Version">
            <summary>
            The version of the plugin
            <example>1.4.1</example>
            </summary>
        </member>
        <member name="P:OpenAPI.Plugins.OpenPluginInfo.Description">
            <summary>
            A human friendly description of the functionality this plugin provides
            <example>This plugin is so 1337. You can set yourself on fire.</example>
            </summary>
        </member>
        <member name="P:OpenAPI.Plugins.OpenPluginInfo.Author">
            <summary>
            Uniqely identifies who developed this plugin
            <example>TruDan</example>
            <example>TruDan &lt;trudan@example.com&gt;</example>
            </summary>
        </member>
        <member name="P:OpenAPI.Plugins.OpenPluginInfo.Authors">
            <summary>
            Allows you to list multiple authors, if it is a collaborative project.
            <seealso cref="P:OpenAPI.Plugins.OpenPluginInfo.Author"/>
            </summary>
        </member>
        <member name="P:OpenAPI.Plugins.OpenPluginInfo.Website">
            <summary>
            The plugin's or author's website.
            <example>example.com/MyAwesomePlugin</example>
            </summary>
        </member>
        <member name="P:OpenAPI.Plugins.OpenPluginManager.Services">
            <summary>
            	The dependency injection service container used when loading plugins.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenAPI.Plugins.OpenPluginManager.DiscoverPlugins(System.String[])" -->
        <member name="M:OpenAPI.Plugins.OpenPluginManager.UnloadPluginAssembly(System.Reflection.Assembly)">
            <summary>
            	Unloads all plugins registered by specified assembly
            </summary>
            <param name="pluginAssembly"></param>
        </member>
        <member name="M:OpenAPI.Plugins.OpenPluginManager.UnloadAll">
            <summary>
            	Unloads all loaded plugins
            </summary>
        </member>
        <member name="M:OpenAPI.Plugins.OpenPluginManager.GetLoadedPlugins">
            <summary>
            	Returns a list of all loaded plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenAPI.Utils.FastRandom">
            <summary>
            A fast random number generator for .NET
            Colin Green, January 2005
            
            September 4th 2005
             Added NextBytesUnsafe() - commented out by default.
             Fixed bug in Reinitialise() - y,z and w variables were not being reset.
            
            Key points:
             1) Based on a simple and fast xor-shift pseudo random number generator (RNG) specified in: 
             Marsaglia, George. (2003). Xorshift RNGs.
             http://www.jstatsoft.org/v08/i14/xorshift.pdf
             
             This particular implementation of xorshift has a period of 2^128-1. See the above paper to see
             how this can be easily extened if you need a longer period. At the time of writing I could find no 
             information on the period of System.Random for comparison.
            
             2) Faster than System.Random. Up to 8x faster, depending on which methods are called.
            
             3) Direct replacement for System.Random. This class implements all of the methods that System.Random 
             does plus some additional methods. The like named methods are functionally equivalent.
             
             4) Allows fast re-initialisation with a seed, unlike System.Random which accepts a seed at construction
             time which then executes a relatively expensive initialisation routine. This provides a vast speed improvement
             if you need to reset the pseudo-random number sequence many times, e.g. if you want to re-generate the same
             sequence many times. An alternative might be to cache random numbers in an array, but that approach is limited
             by memory capacity and the fact that you may also want a large number of different sequences cached. Each sequence
             can each be represented by a single seed value (int) when using FastRandom.
             
             Notes.
             A further performance improvement can be obtained by declaring local variables as static, thus avoiding 
             re-allocation of variables on each call. However care should be taken if multiple instances of
             FastRandom are in use or if being used in a multi-threaded environment.
            
            </summary>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.#ctor">
            <summary>
            Initialises a new instance using time dependent seed.
            </summary>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.#ctor(System.Int32)">
            <summary>
            Initialises a new instance using an int value as seed.
            This constructor signature is provided to maintain compatibility with
            System.Random
            </summary>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.Reinitialise(System.Int32)">
            <summary>
            Reinitialises using an int value as a seed.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.Next">
            <summary>
            Generates a random int over the range 0 to int.MaxValue-1.
            MaxValue is not generated in order to remain functionally equivalent to System.Random.Next().
            This does slightly eat into some of the performance gain over System.Random, but not much.
            For better performance see:
            
            Call NextInt() for an int over the range 0 to int.MaxValue.
            
            Call NextUInt() and cast the result to an int to generate an int over the full Int32 value range
            including negative values. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.Next(System.Int32)">
            <summary>
            Generates a random int over the range 0 to upperBound-1, and not including upperBound.
            </summary>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random int over the range lowerBound to upperBound-1, and not including upperBound.
            upperBound must be >= lowerBound. lowerBound may be negative.
            </summary>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.NextDouble">
            <summary>
            Generates a random double. Values returned are from 0.0 up to but not including 1.0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the provided byte array with random bytes.
            This method is functionally equivalent to System.Random.NextBytes(). 
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.NextUInt">
            <summary>
            Generates a uint. Values returned are over the full range of a uint, 
            uint.MinValue to uint.MaxValue, inclusive.
            
            This is the fastest method for generating a single random number because the underlying
            random number generator algorithm generates 32 random bits that can be cast directly to 
            a uint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.NextInt">
            <summary>
            Generates a random int over the range 0 to int.MaxValue, inclusive. 
            This method differs from Next() only in that the range is 0 to int.MaxValue
            and not 0 to int.MaxValue-1.
            
            The slight difference in range means this method is slightly faster than Next()
            but is not functionally equivalent to System.Random.Next().
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.FastRandom.NextBool">
            <summary>
            Generates a single random bit.
            This method's performance is improved by generating 32 bits in one operation and storing them
            ready for future calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.ReflectionHelper.GetPrivatePropertyValue``1(System.Type,System.Object,System.String)">
            <summary>
            Returns a _private_ Property Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:OpenAPI.Utils.ReflectionHelper.GetPrivateFieldValue``1(System.Type,System.Object,System.String)">
            <summary>
            Returns a private Property Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:OpenAPI.Utils.ReflectionHelper.SetPrivatePropertyValue``1(System.Type,System.Object,System.String,``0)">
            <summary>
            Sets a _private_ Property Value from a given Object. Uses Reflection.
            Throws a ArgumentOutOfRangeException if the Property is not found.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is set</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">Value to set.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:OpenAPI.Utils.ReflectionHelper.SetPrivateFieldValue``1(System.Type,System.Object,System.String,``0)">
            <summary>
            Set a private Property Value on a given Object. Uses Reflection.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">the value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the Property is not found</exception>
        </member>
        <member name="T:OpenAPI.Utils.ThreadSafeList`1">
            <summary>
            	WARNING: NOT ACTUALLY THREADSAFE
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenAPI.Utils.ThreadSafeList`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
                Add in an enumerable of items.
            </summary>
            <param name="collection"></param>
            <param name="asParallel"></param>
        </member>
        <member name="M:OpenAPI.Utils.ThreadSafeList`1.Clone(System.Boolean)">
            <summary>
                Returns a new copy of all items in the <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenAPI.Utils.ThreadSafeList`1.ForAll(System.Action{`0},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Perform the <paramref name="action" /> on each item in the list.
            </summary>
            <param name="action"><paramref name="action" /> to perform on each item.</param>
            <param name="performActionOnClones">
                If true, the <paramref name="action" /> will be performed on a <see cref="M:OpenAPI.Utils.ThreadSafeList`1.Clone(System.Boolean)" /> of
                the items.
            </param>
            <param name="asParallel">Use the <see cref="T:System.Linq.ParallelQuery`1" /> method.</param>
            <param name="inParallel">
                Use the
                <see
                    cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
                method.
            </param>
        </member>
        <member name="M:OpenAPI.Utils.ThreadSafeList`1.ForEach(System.Action{`0},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Perform the <paramref name="action" /> on each item in the list.
            </summary>
            <param name="action">
                <paramref name="action" /> to perform on each item.
            </param>
            <param name="performActionOnClones">
                If true, the <paramref name="action" /> will be performed on a <see cref="M:OpenAPI.Utils.ThreadSafeList`1.Clone(System.Boolean)" /> of the items.
            </param>
            <param name="asParallel">
                Use the <see cref="T:System.Linq.ParallelQuery`1" /> method.
            </param>
            <param name="inParallel">
                Use the
                <see
                    cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
                method.
            </param>
        </member>
        <member name="M:OpenAPI.Utils.ThreadSafeList`1.TryTakeOneCopyRest(`0@,System.Collections.Generic.List{`0}@)">
            <summary>
                Remove one item, and return a list-copy of the rest.
            </summary>
            <param name="item"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="T:OpenAPI.World.OpenLevelManager">
            <summary>
            	The LevelManager keeps track of all available Levels (A.K.A Worlds) in the server.
            </summary>
        </member>
        <member name="M:OpenAPI.World.OpenLevelManager.LoadLevel(OpenAPI.World.OpenLevel)">
            <summary>
            	Initializes the <see cref="T:OpenAPI.World.OpenLevel"/> instance, this could include loading the world from a local folder or generating a new world.
            </summary>
            <param name="openLevel">The <see cref="T:OpenAPI.World.OpenLevel"/> instance to register and initialize</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenAPI.World.OpenLevelManager.UnloadLevel(OpenAPI.World.OpenLevel)" -->
        <member name="M:OpenAPI.World.OpenLevelManager.SetDefaultLevel(OpenAPI.World.OpenLevel)">
            <summary>
            	Sets the Default <see cref="T:OpenAPI.World.OpenLevel"/> players join when connecting to the server.
            </summary>
            <param name="level"></param>
        </member>
    </members>
</doc>
